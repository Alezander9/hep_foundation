---
description: "Overview of hep_foundation Project"
globs:
alwaysApply: true
---
# HEP Foundation Project Overview

We are building a foundation model for particle physics. This project analyzes High Energy Physics data, specifically ATLAS PHYSLITE data.

## Structure & Tooling

- **Layout**: Uses the `src` layout.
- **Package Management**: Uses` for virtual environments and package installation.
  - Create environment: `uv venv`
  - Activate environment: `source .venv/bin/activate`
  - Install package for development: `uv pip install -e .`
  - Add runtime dependency: `uv add <package>`
  - Add development dependency: `uv add --dev <package>`
  - IMPORTANT: avoid `uv pip install <package>` in favor of `uv add [--dev] <package>`
  - IMPORTANT: try to use `uv` commands instead of directly editing `pyproject.toml` to ensure the .venv does not desync
- **Linting & Formatting**: Uses` for linting and formatting. Run `uv run ruff check .` to check for issues and `uv run ruff format .` to format code after making significant changes.
- **Configuration**: Project metadata and dependencies are defined in`.
- **Scripts**: Example usage scripts are located in the` directory.
- **Requirements**: Core dependencies are listed in`. Development dependencies should be under `[project.optional-dependencies.dev]`.
- **README**: For setup and basic usage, refer to`.
- **Testing**: Uses `pytest` for testing. Integration test in `tests/test_pipeline.py` validates the ML pipeline workflow:
  - Tests foundation model training, anomaly detection, and regression with minimal test data
  - Uses fixtures for reproducible test environments
  - Run tests: `uv run pytest`
- **Logging**: Centralized logging configuration in `src/hep_foundation/config/logging_config.py`:
  - Console output by default, optional file output
  - Configurable log levels (default: INFO)
  - logger.debug should be used for temporary logging to understand an issue
  - Auto-initialized on package import (see src/hep_foundation/__init__.py)
